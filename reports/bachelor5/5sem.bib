@online{aleksandarkChinaHosts402023,
  title = {China {{Hosts}} 40\% of All {{Arm-based Servers}} in the {{World}}},
  author = {{AleksandarK}},
  date = {2023-12-15},
  url = {https://www.techpowerup.com/311930/china-hosts-40-of-all-arm-based-servers-in-the-world},
  urldate = {2023-12-15},
  abstract = {The escalating challenges in acquiring high-performance x86 servers have prompted Chinese data center companies to accelerate the shift to Arm-based system-on-chips (SoCs). Investment banking firm Bernstein reports that approximately 40\% of all Arm-powered servers globally are currently being used i...},
  langid = {english},
  organization = {{TechPowerUp}}
}

@article{davisAlgorithm1000SuiteSparse2019,
  title = {Algorithm 1000: {{SuiteSparse}}:{{GraphBLAS}}: {{Graph Algorithms}} in the {{Language}} of {{Sparse Linear Algebra}}},
  shorttitle = {Algorithm 1000},
  author = {Davis, Timothy A.},
  date = {2019-12-09},
  journaltitle = {ACM Transactions on Mathematical Software},
  shortjournal = {ACM Trans. Math. Softw.},
  volume = {45},
  number = {4},
  pages = {44:1--44:25},
  issn = {0098-3500},
  doi = {10.1145/3322125},
  url = {https://dl.acm.org/doi/10.1145/3322125},
  urldate = {2023-12-14},
  abstract = {SuiteSparse:GraphBLAS is a full implementation of the GraphBLAS standard, which defines a set of sparse matrix operations on an extended algebra of semirings using an almost unlimited variety of operators and types. When applied to sparse adjacency matrices, these algebraic operations are equivalent to computations on graphs. GraphBLAS provides a powerful and expressive framework for creating graph algorithms based on the elegant mathematics of sparse matrix operations on a semiring. An overview of the GraphBLAS specification is given, followed by a description of the key features and performance of its implementation in the SuiteSparse:GraphBLAS package.},
  keywords = {Graph algorithms,GraphBLAS,sparse matrices}
}

@inproceedings{ducassePortingJITCompiler2022,
  title = {Porting a {{JIT Compiler}} to {{RISC-V}}: {{Challenges}} and {{Opportunities}}},
  shorttitle = {Porting a {{JIT Compiler}} to {{RISC-V}}},
  booktitle = {Proceedings of the 19th {{International Conference}} on {{Managed Programming Languages}} and {{Runtimes}} ({{MPLR}} '22)},
  author = {Ducasse, Quentin and Polito, Guillermo and Tesone, Pablo and Cotret, Pascal and Lagadec, Loïc},
  date = {2022-09},
  location = {{Brussels, Belgium}},
  url = {https://hal.science/hal-03725841},
  urldate = {2023-12-15},
  abstract = {The RISC-V Instruction Set Architecture (ISA) is an open-source, modular and extensible ISA. The ability to add new instructions into a dedicated core opens up perspectives to accelerate VM components or provide dedicated hardware IPs to applications running on top. However, the RISC-V ISA design is clashing on several aspects with other ISAs and therefore software historically built around them. Among them, the lack of condition codes and instruction expansion through simple instruction combination. In this paper we present the challenges of porting Cogit, the Pharo's JIT compiler tightly linked to the x86 ISA, on RISC-V. We present concrete examples of them and the rationale behind their inclusion in the RISC-V ISA. We show how those mismatches are solved through design choices of the compilation process or through tools helping development: a VM simulation framework to keep the development in a high-level environment for the most part, an ISA-agnostic test harness covering main VM functionalities and a machine code debugger to explore and execute generated machine code. We also present a way to prototype custom instructions and execute them in the Pharo environment.},
  keywords = {JIT,RISC-V}
}

@misc{mackenzieCreatingAutomaticConfiguration2021,
  title = {Creating {{Automatic Configuration Scripts}}},
  shorttitle = {Autoconf},
  author = {MacKenzie, David and Elliston, Ben and Demaille, Akim},
  date = {2021-01-28},
  url = {https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.71/autoconf.pdf},
  urldate = {2023-12-10}
}

@inproceedings{mcgrewPortingNetBSDRISCV,
  title = {Porting {{NetBSD}} to the {{RISC-V}}},
  author = {McGrew, Zachary and Nelson, Philip A.},
  url = {https://www.bsdcan.org/2019/schedule/attachments/483_riscvnetbsd.pdf},
  urldate = {2023-12-15}
}

@online{newsHowAlibabaPorting,
  title = {How {{Alibaba}} Is {{Porting RISC-V}} to the {{Android OS}} | {{Guoyin Chen}}, {{Alibaba}} – {{RISC-V International}}},
  author = {News, RISC-V. Community},
  url = {https://riscv.org/blog/2021/11/how-alibaba-is-porting-risc-v-to-the-android-os-guoyin-chen-alibaba/},
  urldate = {2023-12-15},
  langid = {american}
}

@online{sperlingRISCVPushesMainstream2022,
  title = {{{RISC-V Pushes Into The Mainstream}}},
  author = {Sperling, Ed and Baca, Marie C.},
  date = {2022-12-21T08:04:25+00:00},
  url = {https://semiengineering.com/risc-v-pushes-into-the-mainstream/},
  urldate = {2023-12-15},
  abstract = {Open-source processor cores are beginning to show up in heterogeneous SoCs and packages.},
  langid = {american},
  organization = {{Semiconductor Engineering}}
}

@online{WelcomeClangDocumentation,
  title = {Welcome to {{Clang}}'s Documentation! — {{Clang}} 18.0.0git Documentation},
  url = {https://clang.llvm.org/docs/index.html},
  urldate = {2023-12-10}
}
