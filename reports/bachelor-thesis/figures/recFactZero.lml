let true = fun x -> fun y -> x
let false = fun x -> fun y -> y
let if = fun b -> fun t -> fun f -> (b t) f

let zero = fun f -> fun x -> x
let one = fun f -> fun x -> f x
let pred = fun n -> fun f -> fun x -> ((n (fun g -> fun h -> h (g f))) (fun u -> x)) (fun u -> u)
let mult = fun m -> fun n -> fun f -> fun x -> (m (n f)) x
let isZero = fun n -> (n (fun x -> false)) true

let rec fact = fun n -> ((if (isZero n)) (fun z -> one)) (fun z -> (mult n) (fact (pred n)))

let res = fact zero
