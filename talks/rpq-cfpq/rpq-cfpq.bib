
@misc{shemetova_one_2021,
	title = {One Algorithm to Evaluate Them All: Unified Linear Algebra Based Approach to Evaluate Both Regular and Context-Free Path Queries},
	url = {http://arxiv.org/abs/2103.14688},
	doi = {10.48550/arXiv.2103.14688},
	shorttitle = {One Algorithm to Evaluate Them All},
	abstract = {The Kronecker product-based algorithm for context-free path querying ({CFPQ}) was proposed by Orachev et al. (2020). We reduce this algorithm to operations over Boolean matrices and extend it with the mechanism to extract all paths of interest. We also prove \$O(n{\textasciicircum}3/{\textbackslash}log\{n\})\$ time complexity of the proposed algorithm, where n is a number of vertices of the input graph. Thus, we provide the alternative way to construct a slightly subcubic algorithm for {CFPQ} which is based on linear algebra and incremental transitive closure (a classic graph-theoretic problem), as opposed to the algorithm with the same complexity proposed by Chaudhuri (2008). Our evaluation shows that our algorithm is a good candidate to be the universal algorithm for both regular and context-free path querying.},
	number = {{arXiv}:2103.14688},
	publisher = {{arXiv}},
	author = {Shemetova, Ekaterina and Azimov, Rustam and Orachev, Egor and Epelbaum, Ilya and Grigorev, Semyon},
	urldate = {2024-05-31},
	date = {2021-03-26},
	eprinttype = {arxiv},
	eprint = {2103.14688 [cs]},
	keywords = {Computer Science - Databases, Computer Science - Programming Languages},
	file = {arXiv Fulltext PDF:/home/wowaster/Zotero/storage/WITQG8R4/Shemetova et al. - 2021 - One Algorithm to Evaluate Them All Unified Linear.pdf:application/pdf;arXiv.org Snapshot:/home/wowaster/Zotero/storage/A5GAQ9IC/2103.html:text/html},
}

@inproceedings{elekes_graphblas_2020,
	location = {Waltham, {MA}, {USA}},
	title = {A {GraphBLAS} solution to the {SIGMOD} 2014 Programming Contest using multi-source {BFS}},
	rights = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/{IEEE}.html},
	isbn = {978-1-72819-219-2},
	url = {https://ieeexplore.ieee.org/document/9286186/},
	doi = {10.1109/HPEC43674.2020.9286186},
	abstract = {The {GraphBLAS} standard deﬁnes a set of fundamental building blocks for formulating graph algorithms in the language of linear algebra. Since its ﬁrst release in 2017, the expressivity of the {GraphBLAS} {API} and the performance of its implementations (such as {SuiteSparse}:{GraphBLAS}) have been studied on a number of textbook graph algorithms such as {BFS}, single-source shortest path, and connected components. However, less attention was devoted to other aspects of graph processing such as handling typed and attributed graphs (also known as property graphs), and making use of complex graph query techniques (handling paths, aggregation, and ﬁltering). To study these problems in more detail, we have used {GraphBLAS} to solve the case study of the 2014 {SIGMOD} Programming Contest, which deﬁnes complex graph processing tasks that require a diverse set of operations. Our solution makes heavy use of multi-source {BFS} algorithms expressed as sparse matrix-matrix multiplications along with other {GraphBLAS} techniques such as masking and submatrix extraction. While the queries can be formulated in {GraphBLAS} concisely, our performance evaluation shows mixed results. For some queries and data sets, the performance is competitive with the hand-optimized top solutions submitted to the contest, however, in some cases, it is currently outperformed by orders of magnitude.},
	eventtitle = {2020 {IEEE} High Performance Extreme Computing Conference ({HPEC})},
	pages = {1--7},
	booktitle = {2020 {IEEE} High Performance Extreme Computing Conference ({HPEC})},
	publisher = {{IEEE}},
	author = {Elekes, Marton and Nagy, Attila and Sandor, David and Antal, Janos Benjamin and Davis, Timothy A. and Szarnyas, Gabor},
	urldate = {2024-05-31},
	date = {2020-09-22},
	langid = {english},
	file = {A GraphBLAS solution to the SIGMOD 2014 Programming Contest using multi-source BFS | IEEE Conference Publication | IEEE Xplore:/home/wowaster/Zotero/storage/6DI6WQS9/9286186.html:text/html;Elekes et al. - 2020 - A GraphBLAS solution to the SIGMOD 2014 Programmin.pdf:/home/wowaster/Zotero/storage/S833PRRF/Elekes et al. - 2020 - A GraphBLAS solution to the SIGMOD 2014 Programmin.pdf:application/pdf},
}

@inproceedings{nole_regular_2016,
	location = {New York, {NY}, {USA}},
	title = {Regular Path Queries on Massive Graphs},
	isbn = {978-1-4503-4215-5},
	url = {https://doi.org/10.1145/2949689.2949711},
	doi = {10.1145/2949689.2949711},
	series = {{SSDBM} '16},
	abstract = {Regular Path Queries ({RPQs}) represent a powerful tool for querying graph databases and are of particular interest, because they form the building blocks of other query languages, and because they can be used in many theoretical or practical contexts for different purposes. In this paper we present a novel system for processing regular path queries on massive data graphs. As confirmed by an extensive experimental evaluation, our system scales linearly with the number of vertices and/or edges, and it can efficiently query graphs up to a billion vertices and 100 billion edges.},
	pages = {1--12},
	booktitle = {Proceedings of the 28th International Conference on Scientific and Statistical Database Management},
	publisher = {Association for Computing Machinery},
	author = {Nolé, Maurizio and Sartiani, Carlo},
	urldate = {2024-05-27},
	date = {2016-07-18},
	file = {PDF:/home/wowaster/Zotero/storage/CCPE765R/Nolé and Sartiani - 2016 - Regular Path Queries on Massive Graphs.pdf:application/pdf},
}

@article{garcia_path_2024,
	title = {Path Querying in Graph Databases: A Systematic Mapping Study},
	volume = {12},
	issn = {2169-3536},
	url = {https://ieeexplore.ieee.org/document/10456906},
	doi = {10.1109/ACCESS.2024.3371976},
	shorttitle = {Path Querying in Graph Databases},
	abstract = {Path querying refers to the evaluation of path queries in a graph database. New research in this topic is crucial for the development of graph database systems as path queries are associated with relevant use-cases and application domains. The aim of this article is to identify and establish what is currently known about path querying in graph databases. To achieve this, we conducted a systematic mapping study ({SMS}) in which we explored four digital libraries and collected research papers published from 1970 to 2022. These articles were filtered, classified and analyzed to extract quantitative and qualitative information which is presented in this article. Additionally, we provide a concise description of keywords, use-cases and application domains associated with path querying in graph databases.},
	pages = {33154--33172},
	journaltitle = {{IEEE} Access},
	author = {García, Roberto and Angles, Renzo},
	urldate = {2024-09-30},
	date = {2024},
	note = {Conference Name: {IEEE} Access},
	keywords = {Data models, Database languages, Databases, Graphical models, Optimization methods, Path, Path planning, path querying, Query processing, Reviews, Surveys, Systematics},
	file = {Full Text PDF:/home/wowaster/Zotero/storage/2GA8CTAT/García and Angles - 2024 - Path Querying in Graph Databases A Systematic Mapping Study.pdf:application/pdf;IEEE Xplore Abstract Record:/home/wowaster/Zotero/storage/DHC9WYUE/10456906.html:text/html},
}

@book{bonifati_querying_2018,
	location = {Cham},
	title = {Querying Graphs},
	rights = {https://www.springer.com/tdm},
	isbn = {978-3-031-00736-1 978-3-031-01864-0},
	url = {https://link.springer.com/10.1007/978-3-031-01864-0},
	series = {Synthesis Lectures on Data Management},
	publisher = {Springer International Publishing},
	author = {Bonifati, Angela and Fletcher, George and Voigt, Hannes and Yakovets, Nikolay},
	urldate = {2024-09-30},
	date = {2018},
	langid = {english},
	doi = {10.1007/978-3-031-01864-0},
}

@article{mendelzon_finding_1995,
	title = {Finding Regular Simple Paths in Graph Databases},
	volume = {24},
	issn = {0097-5397},
	url = {https://epubs.siam.org/doi/10.1137/S009753979122370X},
	doi = {10.1137/S009753979122370X},
	abstract = {We give algorithms for finding the k shortest paths (not required to be simple) connecting a pair of vertices in a digraph. Our algorithms output an implicit representation of these paths in a digraph with n vertices and m edges, in time O(m + n log n + k). We can also find the k shortest paths from a given source s to each vertex in the graph, in total time O(m + n log n + kn). We describe applications to dynamic programming problems including the knapsack problem, sequence alignment, maximum inscribed polygons, and genealogical relationship discovery.},
	pages = {1235--1258},
	number = {6},
	journaltitle = {{SIAM} Journal on Computing},
	shortjournal = {{SIAM} J. Comput.},
	author = {Mendelzon, Alberto O. and Wood, Peter T.},
	urldate = {2024-10-05},
	date = {1995-12},
	note = {Publisher: Society for Industrial and Applied Mathematics},
	file = {Submitted Version:/home/wowaster/Zotero/storage/ETJ93J9E/Mendelzon and Wood - 1995 - Finding Regular Simple Paths in Graph Databases.pdf:application/pdf},
}

@misc{deutsch_graph_2021,
	title = {Graph Pattern Matching in {GQL} and {SQL}/{PGQ}},
	url = {http://arxiv.org/abs/2112.06217},
	doi = {10.48550/arXiv.2112.06217},
	abstract = {As graph databases become widespread, {JTC}1 -- the committee in joint charge of information technology standards for the International Organization for Standardization ({ISO}), and International Electrotechnical Commission ({IEC}) -- has approved a project to create {GQL}, a standard property graph query language. This complements a project to extend {SQL} with a new part, {SQL}/{PGQ}, which specifies how to define graph views over an {SQL} tabular schema, and to run read-only queries against them. Both projects have been assigned to the {ISO}/{IEC} {JTC}1 {SC}32 working group for Database Languages, {WG}3, which continues to maintain and enhance {SQL} as a whole. This common responsibility helps enforce a policy that the identical core of both {PGQ} and {GQL} is a graph pattern matching sub-language, here termed {GPML}. The {WG}3 design process is also analyzed by an academic working group, part of the Linked Data Benchmark Council ({LDBC}), whose task is to produce a formal semantics of these graph data languages, which complements their standard specifications. This paper, written by members of {WG}3 and {LDBC}, presents the key elements of the {GPML} of {SQL}/{PGQ} and {GQL} in advance of the publication of these new standards.},
	number = {{arXiv}:2112.06217},
	publisher = {{arXiv}},
	author = {Deutsch, Alin and Francis, Nadime and Green, Alastair and Hare, Keith and Li, Bei and Libkin, Leonid and Lindaaker, Tobias and Marsault, Victor and Martens, Wim and Michels, Jan and Murlak, Filip and Plantikow, Stefan and Selmer, Petra and Voigt, Hannes and van Rest, Oskar and Vrgoč, Domagoj and Wu, Mingxi and Zemke, Fred},
	urldate = {2024-10-06},
	date = {2021-12-12},
	eprinttype = {arxiv},
	eprint = {2112.06217 [cs]},
	keywords = {Computer Science - Databases, H.2.3},
	file = {arXiv Fulltext PDF:/home/wowaster/Zotero/storage/65M45QUG/Deutsch et al. - 2021 - Graph Pattern Matching in GQL and SQLPGQ.pdf:application/pdf;arXiv.org Snapshot:/home/wowaster/Zotero/storage/Z4SGNPDD/2112.html:text/html},
}

@misc{melton_information_2023,
	title = {Information technology — Database language — {SQL}},
	url = {https://www.iso.org/standard/76583.html},
	shorttitle = {{ISO}/{IEC} 9075-1},
	abstract = {Information technology — Database languages {SQL} — Part 1: Framework ({SQL}/Framework)},
	number = {{ISO}/{IEC} 9075-1:2023(E)},
	author = {Melton, Jim and Bartels, Jörn},
	urldate = {2024-10-06},
	date = {2023-06},
	langid = {english},
}

@online{neo4j_opencypher_nodate,
	title = {{openCypher} · {openCypher}},
	url = {https://opencypher.org/},
	author = {{Neo4j}},
	urldate = {2024-10-06},
	file = {openCypher · openCypher:/home/wowaster/Zotero/storage/HCAJHLE7/opencypher.org.html:text/html},
}

@online{w3c_sparql_nodate,
	title = {{SPARQL} 1.1 Query Language},
	url = {https://www.w3.org/TR/sparql11-query/},
	author = {{W3C}},
	urldate = {2024-10-06},
	file = {SPARQL 1.1 Query Language:/home/wowaster/Zotero/storage/RAW7G9MQ/sparql11-query.html:text/html},
}

@online{apache_tinkerpop_apache_nodate,
	title = {Apache {TinkerPop}: Gremlin},
	url = {https://tinkerpop.apache.org/gremlin.html},
	author = {{Apache TinkerPop}},
	urldate = {2024-10-06},
	file = {Apache TinkerPop\: Gremlin:/home/wowaster/Zotero/storage/MIV6YLF5/gremlin.html:text/html},
}

@misc{isoiec_39075_information_nodate,
	title = {Information technology — Database languages — {GQL}},
	url = {https://www.iso.org/standard/76120.html},
	shorttitle = {{ISO}/{IEC} 39075},
	abstract = {Information technology — Database languages — {GQL}},
	author = {{ISO/IEC 39075}},
	urldate = {2024-10-06},
	langid = {english},
	file = {Snapshot:/home/wowaster/Zotero/storage/U4GZVHT7/76120.html:text/html},
}

@inproceedings{yamaguchi_modeling_2014,
	title = {Modeling and Discovering Vulnerabilities with Code Property Graphs},
	url = {https://ieeexplore.ieee.org/document/6956589},
	doi = {10.1109/SP.2014.44},
	abstract = {The vast majority of security breaches encountered today are a direct result of insecure code. Consequently, the protection of computer systems critically depends on the rigorous identification of vulnerabilities in software, a tedious and error-prone process requiring significant expertise. Unfortunately, a single flaw suffices to undermine the security of a system and thus the sheer amount of code to audit plays into the attacker's cards. In this paper, we present a method to effectively mine large amounts of source code for vulnerabilities. To this end, we introduce a novel representation of source code called a code property graph that merges concepts of classic program analysis, namely abstract syntax trees, control flow graphs and program dependence graphs, into a joint data structure. This comprehensive representation enables us to elegantly model templates for common vulnerabilities with graph traversals that, for instance, can identify buffer overflows, integer overflows, format string vulnerabilities, or memory disclosures. We implement our approach using a popular graph database and demonstrate its efficacy by identifying 18 previously unknown vulnerabilities in the source code of the Linux kernel.},
	eventtitle = {2014 {IEEE} Symposium on Security and Privacy},
	pages = {590--604},
	booktitle = {2014 {IEEE} Symposium on Security and Privacy},
	author = {Yamaguchi, Fabian and Golde, Nico and Arp, Daniel and Rieck, Konrad},
	urldate = {2024-10-07},
	date = {2014-05},
	note = {{ISSN}: 2375-1207},
	keywords = {Abstracts, Databases, Graph Databases, Joints, Kernel, Security, Static Analysis, Syntactics, Vulnerabilities},
	file = {Full Text PDF:/home/wowaster/Zotero/storage/MDE7S55H/Yamaguchi et al. - 2014 - Modeling and Discovering Vulnerabilities with Code Property Graphs.pdf:application/pdf;IEEE Xplore Abstract Record:/home/wowaster/Zotero/storage/A4XK8TKJ/6956589.html:text/html},
}

@article{_optimisation_2024,
	title = {Optimisation of the context-free language reachability matrix-based algorithm},
	url = {https://dspace.spbu.ru/handle/11701/46282},
	abstract = {Различные задачи статического анализа кода, биоинформатики и анализа {RDF}-графов сводятся к задаче контекстно-свободной достижимости (КС-достижимости). Одним из перспективных методов решения задачи КС-достижимости для больших графов, встречающихся на практике, является решение задачи в терминах операций линейной алгебры с разреженными матрицами, так как эти операции крайне эффективно выполняются на современном оборудовании. В данной работе предложены, реализованы и протестированы шесть оптимизаций матричного алгоритма КС-достижимости, основанных на свойствах полукольца КС-достижимости, специфике представления КС-языков и особенностях популярной библиотеки линейной алгебры {SuiteSparse}:{GraphBLAS}. Доказано уменьшение временной сложности матричного алгоритма КС-достижимости с O(n{\textasciicircum}5) до O(n{\textasciicircum}3). Разработана система для автоматизации сравнения решателей КС-достижимости. С помощью этой системы установлено, что предложенные оптимизации позволяют в подавляющем большинстве случаев на порядки ускорить матричный КС-решатель и обогнать передовые универсальные КС-решатели.},
	author = {Муравьев, Илья},
	urldate = {2024-10-07},
	date = {2024},
	langid = {russian},
	note = {Accepted: 2024-07-25T11:49:47Z},
	file = {Full Text PDF:/home/wowaster/Zotero/storage/LYXKPB96/Владимирович and Vladimirovic - 2024 - Optimisation of the context-free language reachability matrix-based algorithm.pdf:application/pdf},
}

@article{_experimental_2023,
	title = {Experimental investigation of context-free-language reachability algorithms as applied to static code analysis},
	url = {https://dspace.spbu.ru/handle/11701/42628},
	abstract = {Целью данной работы является экспериментальное исследование алгоритмов КС-достижимости в задаче статического анализа кода. В работе рассмотрены способы сведения анализа псевдонимов и Points-to анализа, учитывающего поля, к задаче КС-достижимости. Также предоставлен обзор решающих её алгоритмов, основанных на операциях линейной алгебры. Описаны модификация тензорного алгоритма и особенности её реализации, а также оптимизация реализации матричного алгоритма. Представлены и обощены результаты проведенных замеров производительности реализаций алгоритмов КС-достижимости.},
	author = {Кутуев, Владимир},
	urldate = {2024-10-07},
	date = {2023},
	langid = {russian},
	note = {Accepted: 2023-07-26T12:44:25Z},
	file = {Full Text PDF:/home/wowaster/Zotero/storage/33ZAIGSL/Александрович and Aleksandrovic - 2023 - Experimental investigation of context-free-language reachability algorithms as applied to static cod.pdf:application/pdf},
}

@article{green_datalog_2013,
	title = {Datalog and Recursive Query Processing},
	volume = {5},
	issn = {1931-7883, 1931-7891},
	url = {https://www.nowpublishers.com/article/Details/DBS-017},
	doi = {10.1561/1900000017},
	abstract = {Datalog and Recursive Query Processing},
	pages = {105--195},
	number = {2},
	journaltitle = {Foundations and Trends® in Databases},
	shortjournal = {{DBS}},
	author = {Green, Todd J. and Huang, Shan Shan and Loo, Boon Thau and Zhou, Wenchao},
	urldate = {2024-10-07},
	date = {2013-11-20},
	note = {Publisher: Now Publishers, Inc.},
	file = {Full Text PDF:/home/wowaster/Zotero/storage/J2Q4L7GW/Green et al. - 2013 - Datalog and Recursive Query Processing.pdf:application/pdf},
}
